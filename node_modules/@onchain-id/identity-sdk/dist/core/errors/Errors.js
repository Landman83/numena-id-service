"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidProviderError = exports.OperationForbiddenError = void 0;
/**
 * Thrown when an operation is executed with insufficient privileges
 */
class OperationForbiddenError extends Error {
    constructor({ message = 'Insufficient privileges to execute the operation.' } = {}) {
        super(message);
        this.name = 'OperationForbiddenError';
        Object.setPrototypeOf(this, OperationForbiddenError.prototype);
    }
}
exports.OperationForbiddenError = OperationForbiddenError;
/**
 * Thrown when attempting to set an Invalid BlockChain Provider.
 */
class InvalidProviderError extends Error {
    constructor(message = 'Specified Provider is not valid. Must be either a default network name, a json RPC address, a Provider or a Signer object.') {
        super(message);
        this.name = 'INVALID_PROVIDER';
    }
}
exports.InvalidProviderError = InvalidProviderError;
//# sourceMappingURL=Errors.js.map
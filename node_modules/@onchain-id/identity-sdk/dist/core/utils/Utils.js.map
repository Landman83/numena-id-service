{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../../../src/core/utils/Utils.ts"],"names":[],"mappings":";;;AAAA,4CAO0B;AAwBjB,yFA9BP,gBAAQ,OA8BO;AAAE,gGA1BjB,uBAAe,OA0BiB;AAtBlC,SAAgB,KAAK,CAAC,OAAe;IACnC,OAAO,IAAA,eAAO,EAAC,IAAA,mBAAW,EAAC,OAAO,CAAC,CAAC,CAAC;AACvC,CAAC;AAFD,sBAEC;AAGD,SAAgB,WAAW,CAAC,KAAU;IACpC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,IAAA,mBAAiB,EAAC,KAAK,CAAC,CAAC;AAC/D,CAAC;AAFD,kCAEC;AAED;;;;GAIG;AACH,SAAgB,UAAU,CAAC,KAAU;IACnC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC,KAAK,IAAI,CAAC;AACjF,CAAC;AAFD,gCAEC;AAED,SAAgB,aAAa,CAAC,KAAe,EAAE,MAAa;IAC1D,OAAO,IAAA,iBAAS,EAAC,uBAAe,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;AAC1D,CAAC;AAFD,sCAEC","sourcesContent":["import {\n  arrayify,\n  hexlify,\n  isHexString as ethersIsHexString,\n  toUtf8Bytes,\n  defaultAbiCoder,\n  keccak256\n} from 'ethers/lib/utils';\n\nexport function toHex(message: string): string {\n  return hexlify(toUtf8Bytes(message));\n}\n\nexport type HexString = string;\nexport function isHexString(value: any): value is HexString {\n  return typeof value === 'string' && ethersIsHexString(value);\n}\n\n/**\n * Check if an URI is valid.\n * @param value\n * @return True if the uri is secured.\n */\nexport function isValidURI(value: any): boolean {\n  return typeof value === 'string' && value.match(/^https?:\\/\\/.*\\..*/) !== null;\n}\n\nexport function encodeAndHash(types: string[], values: any[]): string {\n  return keccak256(defaultAbiCoder.encode(types, values));\n}\n\nexport { arrayify, defaultAbiCoder };\n"]}
{"version":3,"file":"Gateway.js","sourceRoot":"","sources":["../../src/gateway/Gateway.ts"],"names":[],"mappings":"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","sourcesContent":["import {normalizeAddress, resolveENS} from \"../core/utils/ENS\";\nimport {Provider} from \"@ethersproject/providers\";\nimport {Contract, Signer} from \"ethers\";\nimport {InvalidProviderError} from \"../core/errors/Errors\";\nimport {BlockchainOptions} from \"../core/utils/blockchain-options\";\nimport OnchainId from \"@onchain-id/solidity\";\n\nexport class Gateway {\n  public address?: string;\n  public provider?: Provider | Signer;\n  public gatewayInstance?: Contract;\n\n  static async at(addressOrENS: string, options?: BlockchainOptions): Promise<Gateway> {\n    let address: string;\n\n    if (!addressOrENS.includes('.')) {\n      address = normalizeAddress(addressOrENS);\n    } else {\n      if (Provider.isProvider(options?.provider)) {\n        address = await resolveENS(addressOrENS, options?.provider as Provider);\n      } else if (Signer.isSigner(options?.signer) && Provider.isProvider(options?.signer.provider)) {\n        address = await resolveENS(addressOrENS, options?.signer.provider as Provider);\n      } else {\n        throw new InvalidProviderError('Resolving ENS requires a Provider.');\n      }\n    }\n\n    return new Gateway(address, options?.signer || options?.provider);\n  }\n\n  public constructor(address: string, provider?: Provider | Signer) {\n    this.address = normalizeAddress(address);\n    this.provider = provider;\n  }\n\n  public async instantiateGateway(providerOrSigner?: Provider | Signer): Promise<Contract> {\n    const _provider = providerOrSigner ?? this.provider;\n\n    if (this.gatewayInstance && (this.gatewayInstance.provider === _provider || this.gatewayInstance.signer === _provider)) {\n      return this.gatewayInstance;\n    }\n\n    if (!this.address) {\n      throw new Error('Gateway has no address defined.');\n    }\n\n    this.gatewayInstance = new Contract(\n      this.address,\n      OnchainId.contracts.Gateway.abi,\n      _provider,\n    );\n\n    return this.gatewayInstance;\n  }\n\n  public async approveSigner(signer: string, options?: BlockchainOptions): Promise<void> {\n    const _signer = options?.signer ?? this.provider;\n    if (!Signer.isSigner(_signer)) {\n      throw new InvalidProviderError('Contract operations require a Signer.');\n    }\n\n    let instance = this.gatewayInstance;\n    if (!instance || options?.signer) {\n      instance = await this.instantiateGateway(_signer);\n    }\n\n    return instance.approveSigner(signer, options?.overrides ?? {});\n  }\n\n  public async revokeSigner(signer: string, options?: BlockchainOptions): Promise<void> {\n    const _signer = options?.signer ?? this.provider;\n    if (!Signer.isSigner(_signer)) {\n      throw new InvalidProviderError('Contract operations require a Signer.');\n    }\n\n    let instance = this.gatewayInstance;\n    if (!instance || options?.signer) {\n      instance = await this.instantiateGateway(_signer);\n    }\n\n    return instance.revokeSigner(signer, options?.overrides ?? {});\n  }\n\n  public async revokeSignature(signature: string, options?: BlockchainOptions): Promise<void> {\n    const _signer = options?.signer ?? this.provider;\n    if (!Signer.isSigner(_signer)) {\n      throw new InvalidProviderError('Contract operations require a Signer.');\n    }\n\n    let instance = this.gatewayInstance;\n    if (!instance || options?.signer) {\n      instance = await this.instantiateGateway(_signer);\n    }\n\n    return instance.revokeSignature(signature, options?.overrides ?? {});\n  }\n\n  public async approveSignature(signature: string, options?: BlockchainOptions): Promise<void> {\n    const _signer = options?.signer ?? this.provider;\n    if (!Signer.isSigner(_signer)) {\n      throw new InvalidProviderError('Contract operations require a Signer.');\n    }\n\n    let instance = this.gatewayInstance;\n    if (!instance || options?.signer) {\n      instance = await this.instantiateGateway(_signer);\n    }\n\n    return instance.approveSignature(signature, options?.overrides ?? {});\n  }\n\n  public async isSignatureRevoked(signature: string, options?: BlockchainOptions): Promise<boolean> {\n    const _provider = options?.provider ?? options?.signer ?? this.provider;\n\n    let instance = this.gatewayInstance;\n    if (!instance) {\n      instance = await this.instantiateGateway(_provider);\n    }\n\n    return instance.revokedSignatures(signature);\n  }\n\n  public async isApprovedSigner(signer: string, options?: BlockchainOptions): Promise<boolean> {\n    const _provider = options?.provider ?? options?.signer ?? this.provider;\n\n    let instance = this.gatewayInstance;\n    if (!instance) {\n      instance = await this.instantiateGateway(_provider);\n    }\n\n    return instance.approvedSigners(signer);\n  }\n}"]}